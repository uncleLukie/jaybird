name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      id: setup-dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.100-rc.2.25502.107'
      continue-on-error: true

    - name: Manual .NET 10 RC2 Install (fallback)
      if: steps.setup-dotnet.outcome == 'failure'
      shell: bash
      run: |
        curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 10.0.100-rc.2.25502.107 --install-dir "$HOME/.dotnet"
        echo "$HOME/.dotnet" >> $GITHUB_PATH
        export PATH="$HOME/.dotnet:$PATH"
        dotnet --version

    - name: Install LibVLC on Linux
      run: sudo apt-get update && sudo apt-get install -y libvlc-dev vlc

    - name: Restore dependencies
      run: dotnet restore jaybird.sln

    - name: Build
      run: dotnet build jaybird.sln --no-restore

    - name: Run tests with coverage
      run: |
        dotnet test jaybird.Tests/jaybird.Tests.csproj \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage \
          --logger:"console;verbosity=detailed"

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage/**/coverage.cobertura.xml
        fail_ci_if_error: false
        verbose: true

  build-and-release:
    needs: test
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact_name: jaybird-win-x64.zip
          - os: macos-latest
            runtime: osx-x64
            artifact_name: jaybird-macos-x64.zip
          - os: ubuntu-latest
            runtime: linux-x64
            artifact_name: jaybird-linux-x64.zip

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      id: setup-dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '10.0.100-rc.2.25502.107'
      continue-on-error: true

    - name: Manual .NET 10 RC2 Install (fallback)
      if: steps.setup-dotnet.outcome == 'failure'
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          curl -sSL https://dot.net/v1/dotnet-install.ps1 -o dotnet-install.ps1
          pwsh ./dotnet-install.ps1 -Version 10.0.100-rc.2.25502.107 -InstallDir "$HOME/.dotnet"
        else
          curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --version 10.0.100-rc.2.25502.107 --install-dir "$HOME/.dotnet"
        fi
        echo "$HOME/.dotnet" >> $GITHUB_PATH
        export PATH="$HOME/.dotnet:$PATH"
        dotnet --version

    - name: Install LibVLC on Linux
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libvlc-dev vlc

    - name: Restore dependencies
      run: dotnet restore jaybird.sln -r ${{ matrix.runtime }}

    - name: Publish
      run: dotnet publish jaybird/jaybird.csproj -c Release -r ${{ matrix.runtime }} -o ./publish --self-contained

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create release archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd publish
        Compress-Archive -Path * -DestinationPath ../jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip
        # Generate SHA256 hash for winget (format: hash filename)
        $hash = (Get-FileHash ../jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip -Algorithm SHA256).Hash.ToLower()
        "$hash  jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip" | Out-File -FilePath ../jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip.sha256 -Encoding ascii
      shell: pwsh

    - name: Create release archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd publish
        zip -r ../jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip *
        # Generate SHA256 hash for winget
        sha256sum ../jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip > ../jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip.sha256

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip
          jaybird-${{ steps.get_version.outputs.VERSION }}-${{ matrix.runtime }}.zip.sha256

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release and Upload Assets
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed

          Automated cross-platform release for jaybird ${{ github.ref_name }}

          ### Installation

          **Windows:**
          1. Download `jaybird-${{ steps.get_version.outputs.VERSION }}-win-x64.zip`
          2. Extract to a folder of your choice
          3. Ensure Discord is running
          4. Run `jaybird.exe`

          **macOS (Intel only):**
          1. Download `jaybird-${{ steps.get_version.outputs.VERSION }}-osx-x64.zip`
          2. Extract to a folder of your choice
          3. Ensure Discord is running
          4. Run `./jaybird` from terminal

          **Linux:**
          1. Install libVLC: `sudo apt-get install libvlc-dev vlc` (Ubuntu/Debian) or equivalent
          2. Download `jaybird-${{ steps.get_version.outputs.VERSION }}-linux-x64.zip`
          3. Extract to a folder of your choice
          4. Make executable: `chmod +x jaybird`
          5. Ensure Discord is running
          6. Run `./jaybird`

          ### Requirements
          - .NET 10.0 Runtime (self-contained builds included)
          - Discord Desktop Application
          - Linux: libVLC must be installed separately

          ### Known Limitations
          - macOS: Apple Silicon (M1/M2/M3) not yet supported, Intel Macs only
          - Discord Rich Presence may have limited functionality on non-Windows platforms

          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        files: |
          ./artifacts/jaybird-win-x64.zip/jaybird-${{ steps.get_version.outputs.VERSION }}-win-x64.zip
          ./artifacts/jaybird-win-x64.zip/jaybird-${{ steps.get_version.outputs.VERSION }}-win-x64.zip.sha256
          ./artifacts/jaybird-macos-x64.zip/jaybird-${{ steps.get_version.outputs.VERSION }}-osx-x64.zip
          ./artifacts/jaybird-macos-x64.zip/jaybird-${{ steps.get_version.outputs.VERSION }}-osx-x64.zip.sha256
          ./artifacts/jaybird-linux-x64.zip/jaybird-${{ steps.get_version.outputs.VERSION }}-linux-x64.zip
          ./artifacts/jaybird-linux-x64.zip/jaybird-${{ steps.get_version.outputs.VERSION }}-linux-x64.zip.sha256
